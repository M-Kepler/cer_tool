# -*- coding: utf-8 -*-

import base64
from OpenSSL import crypto
from const import CertConfig as const


class Cer(object):

    def __init__(self, cer_data, cer_pwd, cer_type):
        self.data = cer_data
        self.pwd = cer_pwd
        self.cer_type = cer_type

    def _verify_ca(self, other_cer):
        # base64 解码
        self_cer_b64 = base64.b64decode(self.data)
        other_cer_b64 = base64.b64decode(other_cer.data)

        # 加载 p12 格式证书
        if self.cer_type != const.CER_TYPE_ROOT_CA:
            self_cer_p12 = crypto.load_pkcs12(self_cer_b64, self.pwd)
            self_cer_ca = self_cer_p12.get_ca_certificates()[0]
        else:
            # 传进来的证书是根证时
            self_cer_ca = crypto.load_certificate(crypto.FILETYPE_PEM, self_cer_b64)

        # 加载 p12 格式证书
        if other_cer.cer_type != const.CER_TYPE_ROOT_CA:
            other_cer_p12 = crypto.load_pkcs12(other_cer_b64, other_cer.pwd)
            other_cer = other_cer_p12.get_certificate()
        else:
            # 传进来的证书是根证时
            other_cer = crypto.load_certificate(crypto.FILETYPE_PEM, other_cer_b64)

        store = crypto.X509Store()
        store.add_cert(self_cer_ca)
        ctx = crypto.X509StoreContext(store, other_cer)

        # 证书校验
        ctx.verify_certificate()
        return True

    def verify(self, other_cer):
        """
        比较两个证书内容
        :param other_cer: 目的证书
        """
        if not isinstance(other_cer, Cer):
            raise Exception("type error")

        try:
            return self._verify_ca(other_cer)
        except Exception as ex:
            return False


if __name__ == "__main__":
    # 同一 CA 签发的证书1
    cer1_data = "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"
    # 同一 CA 签发的证书2
    cer2_data = "MIINxQIBAzCCDY8GCSqGSIb3DQEHAaCCDYAEgg18MIINeDCCCC8GCSqGSIb3DQEHBqCCCCAwgggcAgEAMIIIFQYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQMwDgQI1xJm11q9bdkCAggAgIIH6LQqaqjjYOTPKDnrbJ0JfZ2Wh51YalYBhrrc89xCOPMbbwP7c7oFSndNFwxuadkrfRAsN08GcR8dKIaXgkabgIzDuXhS9TfkGb9uuqEMauZ4OkCNWWjkaRx17DBRoVtp/etnK5MHIxZnGAIsFHaE1GQr2G3ggbuNij5+nqsR+FJ9zLR9rxzEuyK8+nAY6jrkrxOA1EGDijHsXCKiQA0wm2B+I/gXyGLSl+Ll4H/IWRX1AIqDsn0Ykwpt5lsH5tvWfK4s+r/ItzEkxaCkT+yOguW4/yvaxnz8e956ZPzKGjatQzaRBwI9Ec7F5aBMr1dxf9SzBNug+7Z85HTVsNwKvOFTjiw3WUxVzc0LyaqW5kn5yBK54if+zQIxkZHyqNpuVb30Ulw9BbPnV7Dy2pmvASgZUCYoq/UYbSWHrRNlpPlbeWILYxURNoVULDaGYnpC69EIxCvFwSe/d6hQM5YMjPJmhtgFWf8kNVNlmIxfK4NXxbJvcNjbGEY3aqdYo2K0g7Xs3BkSsGPmtVzs09WxG/0ecxGe2NTNUonz/tQVi+Vqd7f30oS8+785DT083fOGnrSzxyUorhrvQJZCqy5D9tsrtMPvNKwQ6jTVrTKmY4p+6vTgndSL31/WPV6skkYw1pMqoyOTc4BhzgIMVQxoeFZdBkbyG4ib8Tw8apUqz4+hERvyxGFAp1CCr9M825AZ7v0sIPuBPPeSb1yBqPR2qWQNFds7qF5lcDvmTvu6Fte/ciSHuUQ2Mg6yKoQGrIFrJLgZCBYv8WTBXrMhqLo3DuZwAsjWqT+ceOLhzwMNLRHh6yzd85JGoVTLVvwNaO4yfJMHqfQL0Qmd/stddaNf1OglV8l0ay2n8lHf/SFoL5LZwtIbevek2UqVsb03xUXpGLfDJrycAOg2IYKurmrVXuddJIhRy/MjltlJYKfhUTGYS3rScq5oSaeyrSGJ5UuuH/0PDNJI9/j9zlJQl78lqxQ/PQbm/UOa8ZZ65F3C4Xl8mxUb+EL5bWU7wnnMWpum4Myslc5pV81C6W1qfonmtJE9VxyNPnB/VseRMqfCdeovFgnDL72u+tPvVlx1xX0EkuM0OV9Ui0Yvzv3hBO2eO1gn4YsvwCkPXGZdgXJgVAPvVnRLrn+jiQhM46RzHUTcn1Iv+H7PaaxMzbhs23TgnfNKttpFJZv/+i+NG/hkxVDu/XpCmIWFzSMGB93OiIObHOJNnwY7gikbfyI4LkSZC+m3b9ztWLz4zq6gRLDVnTQ9MmGJf/p/QgT4X5FUMbdKvZzmWcx5rb1sriAxhvzldMuRX3p57f0mas21QN0s6SAWSmKN3Inf2ibAVQEqD27E3/NOrn7STJ2A4kQL+LM/QGz8YGFN0SfjJUGZ80HVMxG2ppFRc6pUvMeJ4P6HBgM7hDxOl5mE8JXlIt16GqN2k0z4FO3dpIdyejSN6mvbeXPfFgBZzNBC7QkySf7Cm2utvA/R4ZbjkYrKTURA0SR70ntFgEscTGj30I//3bf5kw64tm9P1cKJlVWIQBNK9xPLFNrGnXr2itcsrnpYdFLC3Mou5arL7BvqgjK8PIzINFdLfDkzeVph2htwQw5BIgDPWPTID9U4kCN/jniPpWxdexajOlc+iQd8qvt4GZejT0kYp8CKXXnEJ7NkMlO95ySbHkiOGcYTe1R8Yekx3gX9RMQLLvtZgxX8ZxJxvPsNoxtTW50vKhEya5z1KiE2M8jRESK4IVDKtpRSDFY6nfeDn+03cpBqucb+yseTx3JYQVTlqRGCEs3CCwl5aUSBcp4xryWQLO6saKEHzM6GJ26qDZsoM/VOAbX9v4B4ljmP/m2YfRz8Z/KjLWfNxTq6ScC9TmVjolLahhqQ37HHtH8oin8fuXuWrWXWo0Mad6a/buMgJKjB0BFKimTdPL1TOE1eP0cjJGmUuJ3n5BOsEkIqfwSIHSMhIckFzEbT0PBO3GbUzUr2KWx1Z6t3nGz2kU+NJIjBSyI3kMW40eBrkPCnwPX/LPBc27xHPSoGZojXDzozjPnUcwfdRhCtkFyXwAA+3qdAyEihmoOdtlp79VPw81GZYLqvgXlGOZh0dhW88P64K2V9zKGqzoZWFQMsWJLBfzO5pL3lofWvulfx5YUi9tpa0Sjgo/lSWTNsqsLMdEEgGDUNQA6iPtKzoFYQmCxMcBVWwkd/MuDVp8WbUaJ5TcT+4a+QGXIWpntvz/z/s0T0cfdM25FsI8bBz/fxblH9bXzGamqF+GYXMoRC4Sszwry8xafF/MXRVzve1cXtOcsirJJg45vLYV2ifo6hGi62BOu63OlqYcCr0C79lMZ1Ir4JAQ6NxkN3+m14a1O2sXE4gCKIdxFUIQmX3huyFxXJjwBIaEaldlH5EfKmmEcdEuXHY48wLoe4EZWsuWyYFMTEEBQoPfZA2vxTYV8c8IgDBHpHS3YG/aTYd826TpBJdABwJ9iDOkmSRPY5iS/hQ/Zda73vqNH8ikIqfiqC63e7fZPCFdiHiGsRIeU4MgwEwXGk02yNI8u4BLGb1uP/pNj8Qu7JuQsrqLMggSXoCVP6Z35xWBi3UxC3b/XTjoNwnybOgHsTGrcc+IUHR7HAXD7N+8IatxXog+avHYWyKN3dUNaaJUpnkI3YmMgvP7nCfgVb/efN5mB6hSkzZupPMn8DWn7o3JhCyuZP+RkehGSErpD5Ua36ExfIMIIFQQYJKoZIhvcNAQcBoIIFMgSCBS4wggUqMIIFJgYLKoZIhvcNAQwKAQKgggTuMIIE6jAcBgoqhkiG9w0BDAEDMA4ECEoc3MtFcRfMAgIIAASCBMhmQht1981hNYVGhljl87NopeAABJiyLyaTdWMYvfwBlDNkAzuaEpCP1ESDXk9rnlEyesS3ZfNAq9m91QaYyvAT7nnxMK0ZIPIroN33q6dl8h5A96OD/WHfB0u/2lgWuZTnx1A+rw7DxqVXSIR5JWazN8SDV9aHuJfn10TjNsDdqdAMFwwVKcuHhZGDoKBPiU7mG1xQlDObuicc3DwL11lRgr0IqSi6saHv2hXm5EY7mNhSxKFscOlU8BPp2FXmzfpRtzwN+c/7jn2jNb78OIj12rQ98lwB9KlW52vftmt1t9SNbVW8p7ncNO1w47jQpgX2FPXA+Az3WO9fEbQta8DoEPu8BEyaYsdKUcTG/dHEpG2EI9vAUR3SzUZXqZ8pXti8R2BCd7kfnAWPDefXXrIbueb7c8tqTLZTw8pRcmz8C99+BusH59VDmPa1gezhMLWk1sUe3dC2elmTs0bZngiU/9Hf+MbYStiZOyFffrWZmJTj6NFzc+Ife9giiofQYYWcmEu29CrpEar8wZEpNhr7psGJAKS8R86ZxTteBVtv6QjnHdf9PB+VPoZbfnskx+hcEQEJvWBPTwzK8QdcsAoZL5mDuokJeNP7O/AewaNeYyLFnEMWHm1F2v/WSdCPm7BUZJPWgoTHzYWJAFnzc+PEfU9FJhAtQPk2l7TEcR70BQnHuwwaQ5MYEQhJfduGxAnx2deDsl8UDw8fYe5HmGilOUmIZMeSM0tswgT6V6gb/zw78PuE6HuPjJsbYrDunZzvnSmqVHeH1VS6eOZNBbr8vM8idNa1BkB2m5GlwqKzuEyreTmG2A1t+BSmNF6v26kthQ/mxaeX7Zv4bOeZd1KQXxYkFR7PQBXBfJ9BlJ43azwvwOknIlKsSkK1jtRnjNePAOhPNPoqeE8QapMEgS8SpSikkQearWXluurhVQGtqFZjMso1Qdfc/mXaAECL0bmhFkrarU25HLbKv5+5MBiWrpf8M3I+twsS4N2v4q4KcYbCCQXCKhfppnK14uK40xSXPd+IKBb/JgUatE/bJyASaP7qn93BC9HnvMOCuaupJhupfFNv9Bm0dCJxrfNIUL7UkLjZJyobYwJgv8ds97UJRfcRMzCwhLdls3OgkT6a6G6yM9AC6d+zW2DPGuW0WxrjWdiW8B4WycbCI3E8vgN6Kjzba6GFR75lHTTgRXNoK3Zlw2pTrNHJQ/G6ERkR11Yd6Kmey8LqoOBzbDgXM791xndJi5rhPlXeVc+aS6ZoLss/aqg8i0nRqLTkf5OH3VfhVUW+pVNur8Hmqs7Fq5AhyeKW1SZe51coB6yRx/nLW9ifCg0NSvjV6IvjHeKEJt3vXOk0YGRe+QU2k0lIifgF6DaL6xqHQ1VtYRXbayhVWC91npSOoPcOfquSe+U8MwByblCGQ6yE0rL75kKP98ELlKWTMi6PkqxlURQkvCRRO4lKkMRuAGKGiG67vp9+hsmBy5e2wug4nIkvVhrp5dpJOLrH0KBBQr+GzuLGUsaOFN1ggiQsHf7w+C1ysMLNe3EVocbasjOapHD9c0RGrEQEwzPLuglRLWMV2K3zNgxYDvTJKHM8nrtURotWIiZAUlJVre3Q+lqZyJLKux9LeFokWivxvtaveFgxJTAjBgkqhkiG9w0BCRUxFgQUKjls0g20s1XHFzkNntlPuryu7O8wLTAhMAkGBSsOAwIaBQAEFJ8vxTARDvSYkxGXYwNIMUuAvY2oBAibdPnNIltjwA=="

    cer1 = Cer(cer_data=cer1_data,
               cer_pwd="pgRcXEdVeqrLSZ6rsV2rpfjII5IFgueN",
               cer_type=const.CER_TYPE_P12)
    cer2 = Cer(cer_data=cer2_data,
               cer_pwd="qUbe8oqU5aWi06nEC1b952M76HGhlimS",
               cer_type=const.CER_TYPE_P12)

    if cer1.verify(cer2):
        print('yes')
    else:
        print('no')
